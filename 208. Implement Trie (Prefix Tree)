class Trie {
private:
    class Node{
    public:
        Node* next[26];
        bool isWord;
    };
    Node root;
public:
    /** Initialize your data structure here. */
    Trie() {
        
    }
    
    /** Inserts a word into the trie. */
    void insert(const string& word) {
        Node* p = &root;
        for(int i = 0; i < word.length(); i++){
            if(p->next[word[i] - 'a'] == nullptr)
                p->next[word[i] - 'a'] = new Node();
            p = p->next[word[i] - 'a'];
        }
        p->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(const string& word) {
        Node* p = &root;
        for(int i = 0; i < word.length(); i++){
            if(p->next[word[i] - 'a'] == nullptr)
                return false;
            p = p->next[word[i] - 'a'];
        }
        return p->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(const string& prefix) {
        Node* p = &root;
        for(int i = 0; i < prefix.length(); i++){
            if(p->next[prefix[i] - 'a'] == nullptr)
                return false;
            p = p->next[prefix[i] - 'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */
