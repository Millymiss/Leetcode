//Runtime limited
// class Solution {
// public:
//     bool canPlaceFlowers(vector<int>& flowerbed, int n) {
//         if(flowerbed.size() == 0)
//             return false;
//         int count = 0;
//         if(flowerbed.size() % 2 == 0 && flowerbed.size() != 0){
//             for(int i = 0; i < flowerbed.size(); i++){
//                 if(flowerbed[i] == 1)
//                     count++;
//             }
//             if(n + count == flowerbed.size() % 2)
//                 return true;
//             else
//                 return false;
//         }
//         else if(flowerbed.size() % 2 != 0){
//             for(int j = 0; j < flowerbed.size(); j++){
//                 if(flowerbed[j % 2 == 0] && flowerbed[j] == 1){
//                     count++;
//                 }
//             }
//             if(n + count == (flowerbed.size() + 1) / 2 )
//                 return true;
//             for(int k = 0; k < flowerbed.size(); k++){
//                 if(flowerbed[k % 2 != 0] && flowerbed[k] == 1){
//                     count++;
//                 }
//             }
//             if(n + count == (flowerbed.size() - 1) / 2 )
//                 return true;
//         }
//         else
//             return false;
//     }
// };
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int i = 0, count = 0;
        while(i < flowerbed.size()){
            if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (flowerbed[i + 1] == 0 || i == flowerbed.size() - 1)){
                flowerbed[i] = 1;
                count++;
            }
            i++;
        }
        return count >= n;
    }
};
